pipeline {
    agent any

    options {
        // 최신 빌드 5개만 보존
        buildDiscarder(logRotator(numToKeepStr: '5'))
        // 빌드 타임아웃 (30분 이상 걸리면 종료)
        timeout(time: 30, unit: 'MINUTES')
    }

    environment {
        IMAGE_NAME   = "kyumin19/be"
        IMAGE_TAG    = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "${IMAGE_NAME}:${IMAGE_TAG}"
        DISCORD_WEBHOOK = credentials('discord-webhook')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/TeamOldYoung/BE.git'
            }
        }

        stage('Build') {
            steps {
                dir('oldYoung') {
                    sh '''
                        ./gradlew clean bootJar -x test \
                          --no-daemon --console=plain --no-parallel \
                          -Dorg.gradle.jvmargs="-Xmx256m -Xms128m"
                    '''
                }
                // 빌드가 끝난 시점에 커밋 정보 확보
                script {
                    env.COMMIT_INFO = sh(
                        script: "git log -1 --pretty=format:'%h | %an | %s'",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                dir('oldYoung') {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                            def image = docker.build("${DOCKER_IMAGE}")
                            image.push()
                            image.push("latest")
                            echo "✅ Docker 이미지 푸시 성공: ${DOCKER_IMAGE}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def message = """{
                    "content": "✅ Jenkins 빌드 성공!\\n이미지: ${DOCKER_IMAGE}\\n커밋: ${env.COMMIT_INFO}"
                }"""
                sh """
                    curl -s -H "Content-Type: application/json" \
                    -X POST -d '${message}' ${DISCORD_WEBHOOK} \
                    || echo "Discord 알림 전송 실패"
                """
            }
        }

        failure {
            script {
                def errorMsg = currentBuild.description ?: "알 수 없는 오류"
                def message = """{
                    "content": "🚨 Jenkins 빌드 실패!\\n빌드: #${BUILD_NUMBER}\\n커밋: ${env.COMMIT_INFO}\\n오류: ${errorMsg}"
                }"""
                sh """
                    curl -s -H "Content-Type: application/json" \
                    -X POST -d '${message}' ${DISCORD_WEBHOOK} \
                    || echo "Discord 알림 전송 실패"
                """
            }
        }

        always {
            cleanWs()
        }
    }
}
